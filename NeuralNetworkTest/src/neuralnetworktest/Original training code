// Original code
        
//     SupervisedTrainingElement suptrelem;

//        suptrelem = new SupervisedTrainingElement(new double[]{0, 0, 0, 0}, new double[]{1, 0, 0, 0, 0, 0, 0, 0});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{0, 0, 1, 0}, new double[]{0, 1, 0, 0, 0, 0, 0, 0});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{0, 1, 1, 0.5}, new double[]{0, 0, 0, 1, 0, 0, 0, 0});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{1, 0, 0, 0.5}, new double[]{0, 0, 0, 0, 1, 0, 0, 0});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{1, 0, 1, 1}, new double[]{0, 0, 0, 0, 0, 1, 0, 0});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{1, 1, 0, 1}, new double[]{0, 0, 0, 0, 0, 0, 1, 0});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{1, 1, 1, 0}, new double[]{0, 0, 0, 0, 0, 0, 1, 1});
//        trainingset.addElement(suptrelem);
//        
//        suptrelem = new SupervisedTrainingElement(new double[]{1, 1, 1, 0.4534}, new double[]{0, 0, 0, 0, 0, 1, 1, 1});
//        trainingset.addElement(suptrelem);
        
//       network.learn(trainingset);
